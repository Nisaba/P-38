<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   applicationComplete="Init()"
					   width="100%" height="100%">

<fx:Style source="P38.css"/>

	
<fx:Script> 
	<![CDATA[ 
		import blockstream.Message;
		import flash.events.Event;
		import flash.events.ErrorEvent;
        import org.qrcode.QRCode;
        import lang.langConfig;
        import utils.myAppli;
        import blockstream.PrivateKey;
        import org.apache.flex.collections.VectorCollection;
        import spark.components.Alert;
        import mx.events.CloseEvent;
        import blockstream.Message;

		[Bindable] private var msg:Message;
		private var myMessages:Vector.<Message>;
		[Bindable] private var myMessagesCollection:VectorCollection;
		
		private var myKeys:Vector.<PrivateKey>;
		[Bindable] private var myKeysCollection:VectorCollection;

		[Bindable] private var Lang:langConfig;

		private function Init():void {
			Lang = langConfig.Factory(Capabilities.language);
			myMessages = myAppli.Messages;
			myMessagesCollection = new VectorCollection(myMessages);
			myKeys = myAppli.PrivateKeys;
			myKeysCollection = new VectorCollection(myKeys);
			nativeWindow.maximize();
		}

		private function SendFile():void {
			var f:File = new File();
			f.addEventListener(Event.SELECT, onFileSelect);
			f.browseForOpen(Lang.SelectionFichier);

			function onFileSelect(e:Event):void {
				f.removeEventListener(Event.SELECT, onFileSelect);
				msg = new Message();
				msg.addEventListener(Event.COMPLETE, onMsgComplete);
				msg.addEventListener(ErrorEvent.ERROR, onMsgError);
				msg.SendFile(e.currentTarget as File, nmrSatoshi.value);
			}


		}

		private function SendMsg():void {
			if (txtMess.text.length == 0) {
				txtMess.setFocus();
				return;
			} 
			
			msg = new Message();
			msg.addEventListener(Event.COMPLETE, onMsgComplete);
			msg.addEventListener(ErrorEvent.ERROR, onMsgError);
			if (chkSign.selected) {
				var myKey:PrivateKey = (cmbKeys.selectedItem as PrivateKey);
				msg.SendTxtCrypt(txtMess.text, nmrSatoshi.value, myKey.Key);
			} else {
				msg.SendTxt(txtMess.text, nmrSatoshi.value);
			}
		}

		private function onMsgComplete(e:Event):void {
			msg.removeEventListener(Event.COMPLETE, onMsgComplete);
			msg.removeEventListener(ErrorEvent.ERROR, onMsgError);
			txtLightning.text = msg.LightningInvoice;

			spriteQrCode.removeChildren();
			var qr:QRCode = new QRCode();
			qr.encode(msg.LightningInvoice);
			spriteQrCode.addChild(new Bitmap(qr.bitmapData));  	

			myMessages.push(msg);
			myMessagesCollection = new VectorCollection(myMessages);
			myAppli.Messages = myMessages;

		}

		private function onMsgError(e:ErrorEvent):void {
			msg.removeEventListener(Event.COMPLETE, onMsgComplete);
			msg.removeEventListener(ErrorEvent.ERROR, onMsgError);
			if (msg.ErrCode == 0) {
				trace (Lang.ErreurMsg + e.text);
			} else {
				trace (Lang.ErreurMsg + msg.ErrCode.toString() + " - " + Lang.ErrDescription[msg.ErrCode]);
				trace (msg.ErrMsg);
			}
		}

		private function AddKey():void {
			var newKey:PrivateKey = new PrivateKey()
			newKey.Desc = txtKeyDesc.text;
			newKey.Key = txtKey.text;

			myKeys.push(newKey);
			myKeysCollection = new VectorCollection(myKeys);
			myAppli.PrivateKeys = myKeys;

			txtKeyDesc.text = "";
			txtKey.text = "";
		}

		private function SupprKey():void {
			Alert.show(Lang.EtesVousSur, 
				myAppli.appName, Alert.YES | Alert.NO, null, OnClosingAlertSupprKey, null, Alert.NO);		

			function OnClosingAlertSupprKey(evt:CloseEvent):void {
				if (evt.detail == Alert.YES || evt.detail == Alert.OK) {
					myKeys.removeAt(dgKeys.selectedIndex);
					myKeysCollection = new VectorCollection(myKeys);
					myAppli.PrivateKeys = myKeys;
				}
			}					
		}

		private function RefreshMsg():void {
			myMessages[dgMsg.selectedIndex].addEventListener(Event.COMPLETE, onMsgRefresh);
			myMessages[dgMsg.selectedIndex].Refresh();

			function onMsgRefresh():void {
				myMessages[dgMsg.selectedIndex].removeEventListener(Event.COMPLETE, onMsgRefresh);
				myMessagesCollection = new VectorCollection(myMessages);
				myAppli.Messages = myMessages;
			}
		}
		
	]]>
</fx:Script>

<fx:Declarations>
	<s:RadioButtonGroup id="rdTypeMessage"/>
</fx:Declarations>

<s:Image x="0" y="0" width="100%" height="100%" scaleMode="stretch"
			 source="@Embed(source='img/mainP38.jpg')"/>
<mx:TabNavigator id="myTab" tabStyleName="StyleTab" width="100%" height="100%" backgroundAlpha="0.0"> 
	<s:NavigatorContent width="100%" height="100%" label="{Lang.NewMsg}">
		<s:VGroup gap="20" width="100%" height="100%" padding="30">
			<s:HGroup verticalAlign="middle">
				<s:RadioButton group="{rdTypeMessage}" label="{Lang.Texte}" value="txt" selected="true"/>
				<s:RadioButton group="{rdTypeMessage}" label="{Lang.Fichier}" value="fic"/>
				<s:Spacer width="50"/>
				<s:BorderContainer color="0x666666" borderWeight="2" cornerRadius="5" >
					<s:layout>
						<s:HorizontalLayout padding="10" gap="5" verticalAlign="middle"/>
					</s:layout>
					<s:Label text="{Lang.Cle}"/>
					<s:ComboBox id="cmbKeys" dataProvider="{myKeysCollection}" labelField="Desc" restrict="|"/>
					<s:Spacer width="20"/>
					<s:CheckBox id="chkSign" label="{Lang.SignerMessage}" enabled="{cmbKeys.selectedItem != null}"/>
				</s:BorderContainer>
			</s:HGroup>
			
			<s:Group>
				<s:TextArea id="txtMess" visible="{rdTypeMessage.selectedValue == 'txt'}" heightInLines="8" widthInChars="40"/>
				<s:Button  label="{Lang.SelectionFichier}" click="SendFile()" visible="{rdTypeMessage.selectedValue == 'fic'}"/>
			</s:Group>

			<s:HGroup verticalAlign="middle">
				<s:Label text="mSatoshi / byte"/>
				<s:NumericStepper id="nmrSatoshi" value="1" minimum="1"/>
				<s:Spacer width="40"/>
				<s:Button label="{Lang.Envoyer}" click="if(rdTypeMessage.selectedValue == 'txt') SendMsg() else SendFile();"/>
			</s:HGroup>

			<s:HGroup visible="{!(msg == null || msg.LightningInvoice.length == 0)}" gap="10">
				<s:TextArea id="txtLightning" width="300" height="200" editable="false"/>
				<s:SpriteVisualElement id="spriteQrCode" width="250" height="250"/>
			</s:HGroup>
		</s:VGroup>
	</s:NavigatorContent>

	<s:NavigatorContent width="100%" height="100%" label="{Lang.MsgEnregistres}">
		<s:VGroup gap="20" width="100%" height="100%" padding="30">
			<s:DataGrid id="dgMsg" editable="false" dataProvider="{myMessagesCollection}" verticalScrollPolicy="auto" width="100%" height="300">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn dataField="DateT" headerText="{Lang.Date}"/>
						<s:GridColumn dataField="MsgID" headerText="{Lang.ID}"/>
						<s:GridColumn dataField="Type" headerText="{Lang.Type}"/>
						<s:GridColumn dataField="mSatoshi" headerText="{Lang.Prix}"/>
						<s:GridColumn dataField="Status" headerText="{Lang.Statut}"/>
						<s:GridColumn dataField="IsCrypted" headerText="{Lang.Crypte}">
							<s:itemRenderer>
								<fx:Component>
									<s:GridItemRenderer>
										<s:CheckBox left="30" selected="{data.IsCrypted}" enabled="false" symbolColor="#244c81"/>
									</s:GridItemRenderer>
								</fx:Component> 
							</s:itemRenderer>
						</s:GridColumn>
						<s:GridColumn dataField="Content" headerText="{Lang.Contenu}"/>
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>		

			<s:BorderContainer color="0x666666" borderWeight="2" cornerRadius="5" visible="{dgMsg.selectedItem != null}"
				width="100%" backgroundAlpha="0.25" backgroundColor="#6693a8" >
				<s:layout>
					<s:VerticalLayout padding="10" horizontalAlign="right"/>
				</s:layout>
				<s:HGroup gap="15" width="100%">	
					<s:FormItem label="{Lang.ID}" width="100%">
						<s:TextInput width="100%" editable="false" text="{(dgMsg.selectedItem as Message).MsgID}"/>
					</s:FormItem>				
					<s:FormItem label="{Lang.Cle}" width="100%">
						<s:TextInput width="100%" editable="false" text="{(dgMsg.selectedItem as Message).CryptKey}"/>
					</s:FormItem>
				</s:HGroup>		
				<s:FormItem label="{Lang.Token}" width="100%">
					<s:TextInput width="100%" editable="false" text="{(dgMsg.selectedItem as Message).MsgToken}"/>
				</s:FormItem>		
				<s:FormItem label="{Lang.FactureLN}" width="100%">
					<s:TextInput width="100%" editable="false" text="{(dgMsg.selectedItem as Message).LightningInvoice}"/>
				</s:FormItem>				
				<s:HGroup gap="15" width="100%">	
					<s:FormItem label="{Lang.Date}" width="100%">
						<s:TextInput width="100%" editable="false" text="{(dgMsg.selectedItem as Message).DateT}"/>
					</s:FormItem>			
					<s:FormItem label="{Lang.Statut}" width="100%">
						<s:TextInput width="100%" editable="false" text="{(dgMsg.selectedItem as Message).Status}"/>
					</s:FormItem>	
					<s:FormItem label="{Lang.Prix}" width="100%">
						<s:TextInput width="100%" editable="false" text="{(dgMsg.selectedItem as Message).mSatoshi}"/>
					</s:FormItem>	
				</s:HGroup>		
				<s:FormItem label="{Lang.ErreurMsg}" width="100%">
					<s:TextInput width="100%" editable="false" text="{(dgMsg.selectedItem as Message).ErrCode + ' - ' + (dgMsg.selectedItem as Message).ErrMsg}"/>
				</s:FormItem>						
				<s:FormItem label="{Lang.Contenu}" width="100%">
					<s:TextInput width="100%" editable="false" text="{(dgMsg.selectedItem as Message).Content}"/>
				</s:FormItem>				
				<s:Button label="{Lang.Rafraichir}" click="RefreshMsg()"/>

			</s:BorderContainer>

		</s:VGroup>
	</s:NavigatorContent>

	<s:NavigatorContent width="100%" height="100%" label="{Lang.ClesPrivees}">
		<s:VGroup gap="20" width="100%" height="100%" padding="30">

			<s:HGroup verticalAlign="middle" gap="10">
				<s:VGroup horizontalAlign="right" gap="20">
					<s:DataGrid id="dgKeys" editable="false" dataProvider="{myKeysCollection}" verticalScrollPolicy="auto" width="450" height="250">
						<s:columns>
							<s:ArrayList>
								<s:GridColumn dataField="Desc" headerText="{Lang.Description}"/>
								<s:GridColumn dataField="Key" headerText="{Lang.Cle}"/>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
					<s:Button label="{Lang.Supprimer}" click="SupprKey()" enabled="{dgKeys.selectedItem != null}"/>
				</s:VGroup>
				<s:Spacer width="15"/>
				<s:VGroup horizontalAlign="right">
					<s:FormItem label="{Lang.Description}">
						<s:TextInput id="txtKeyDesc" width="200"/>
					</s:FormItem>
					<s:FormItem label="{Lang.Cle}">
						<s:TextInput id="txtKey" width="200"/>
					</s:FormItem>
					<s:Button label="{Lang.Ajouter}" click="AddKey()" enabled="{!(txtKeyDesc.text.replace(' ', '') == '' || txtKey.text.replace(' ', '') == '')}"/>
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>		
	</s:NavigatorContent>

	<s:NavigatorContent width="100%" height="100%" label="{Lang.ParamsLN}">
		<s:VGroup gap="20" width="100%" height="100%" padding="30">
			<s:Label text="{Lang.PasImplemente}" fontSize="14"/>
		</s:VGroup>		
	</s:NavigatorContent>

	<s:NavigatorContent width="100%" height="100%" label="Blockstream Web">
		
	</s:NavigatorContent>

</mx:TabNavigator>

</s:WindowedApplication>